##
title = "Кабинет представителя"
url = "/account"
layout = "default"
description = "Sign in, registration and account management."

[session]
security = "user"
redirect = "account/login"

[account]
isDefault = 1

[resetPassword]

[resources]
vars[activeNavLink] = 'account'

[accountComponent]
[createEvent]
[createNews]
[createResult]
==

<h1 class="profile__title">Данные аккаунта {{agent.user.first_name}} {{agent.user.last_name}} ({{agent.getRole()}})</h1>
<div class="tabs-control__list tabs">
    <button class="tabs-control__item tab-button active" data-tab="details">Профиль</button>
    <button class="tabs-control__item tab-button" data-tab="analitics">Аналитика</button>
    <button class="tabs-control__item tab-button" data-tab="create-event">Отправить заявку</button>
    <button class="tabs-control__item tab-button" data-tab="create-news">Создать новость</button>
    <button class="tabs-control__item tab-button" data-tab="sended-events">Отправленные заявки</button>
    <button class="tabs-control__item tab-button" data-tab="add-results">Загрузить результаты</button>
    <button class="tabs-control__item tab-button" data-tab="verify">Верификация аккаунта</button>
    <button class="tabs-control__item tab-button" data-tab="report-event">Отчет по мероприятию</button>
    {% if agent.role == 1 %}
    <button class="tabs-control__item tab-button" data-tab="report-district">Отчет по округу</button>
    {% endif %}
    {% if agent.role == 1 %}
    <button class="tabs-control__item tab-button" data-tab="create-agent">Создать нового представителя</button>
    {% endif %}
</div>
<div id="details" class="tab-content active">
    {% partial 'profile' %}
</div>

<div id="analitics" class="tab-content">
    {% partial 'analitics' %}
</div>
<div id="create-event" class="tab-content">
    {% component 'createEvent' %}
</div>
<div id="create-news" class="tab-content">
    {% component 'createNews' %}
</div>
<div id="sended-events" class="tab-content">
    {% partial 'sended-event' %}
</div>
<div id="add-results" class="tab-content">
    {% component 'createResult' %}
</div>
<div id="verify" class="tab-content">
    {% partial 'verify' %}
</div>
<div id="report-event" class="tab-content">
    {% partial 'report-event' %}
</div>
{% if agent.role == 1 %}
<div id="report-district" class="tab-content">
    {% partial 'report-district' %}
</div>
{% endif %}
{% if agent.role == 1 %}
<div id="create-agent" class="tab-content">
    {% partial 'create-agent' %}
</div>
{% endif %}

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const tabButtons = document.querySelectorAll(".tab-button");
        const tabContents = document.querySelectorAll(".tab-content");

        // Получаем текущую вкладку из URL
        const urlParams = new URLSearchParams(window.location.search);
        const currentTab = urlParams.get('tab') || 'details'; // По умолчанию 'details'

        // Устанавливаем активную вкладку при загрузке
        function setActiveTab(tabId) {
            // Удаляем активный класс со всех кнопок и вкладок
            tabButtons.forEach(button => button.classList.remove("active"));
            tabContents.forEach(content => content.classList.remove("active"));

            // Добавляем активный класс к текущей кнопке и содержимому
            const activeButton = document.querySelector(`[data-tab="${tabId}"]`);
            const activeContent = document.getElementById(tabId);

            if (activeButton && activeContent) {
                activeButton.classList.add("active");
                activeContent.classList.add("active");
            }
        }

        // Функция для обновления URL с параметром region_id
        function updateUrlWithRegion(tabId) {
            let newUrl = `${window.location.pathname}?tab=${tabId}`;
            window.history.pushState({ path: newUrl }, '', newUrl);
        }

        // Функция для переключения вкладок
        function switchTab(event) {
            const targetTab = event.target.getAttribute("data-tab");
            updateUrlWithRegion(targetTab); // Обновляем URL
            setActiveTab(targetTab); // Переключаем вкладки
        }

        // Назначаем обработчики событий всем кнопкам
        tabButtons.forEach(button => {
            button.addEventListener("click", switchTab);
        });

        // Устанавливаем вкладку и добавляем параметр region_id при загрузке
        updateUrlWithRegion(currentTab); // Добавляем параметр region_id в URL
        setActiveTab(currentTab); // Устанавливаем активную вкладку
    });
</script>